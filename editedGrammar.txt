program-->decl_list
decl_list-->decl decl_list'
decl_list'-->decl decl_list'|e
decl-->var_decl|fun_decl
var_decl-->type_spec IDENT;|type_spec IDENT[ ];
type_spec-->VOID|BOOL|INT|FLOAT
fun_decl-->type_spec IDENT (params) compound_stmt
params-->param_list|VOID
param_list-->param param_list'
param_list'-->, param param_list'|e
param-->type_spec IDENT|type_spec IDENT[ ]
stmt_list-->e stmt_list'
stmt_list'-->stmt stmt_list'|e
stmt-->expr_stmt|compound_stmt|if_stmt|while_stmt|return_stmt|break_stmt
expr_stmt-->expr;|;
while_stmt-->WHILE (expr) stmt
compound_stmt-->{ local_decls stmt_list }
local_decls-->e local_decls'
local_decls'-->local_decl local_decls'|e
local_decl-->type_spec IDENT;|type_spec IDENT[ ];
if_stmt-->IF (expr) stmt|IF (expr) stmt ELSE stmt
return_stmt-->RETURN;|RETURN expr;
expr-->IDENT=expr|IDENT[expr]=expr
expr-->expr'
expr'-->OR expr expr'|e
expr-->expr'
expr'-->EQ expr expr'|NE expr expr'|e
expr-->expr'
expr'-->LE expr expr'|< expr expr'|GE expr expr'|> expr expr'|e
expr-->expr'
expr'-->AND expr expr'|e
expr-->expr'
expr'-->+ expr expr'|- expr expr'|e
expr-->expr'
expr'-->* expr expr'|/ expr expr'|% expr expr'|e
expr-->! expr|- expr|+ expr
expr-->(expr)
expr-->IDENT|IDENT[expr]|IDENT(args)|IDENT.size
expr-->BOOL_LIT|INT_LIT|FLOAT_LIT|NEW type_spec[expr]
arg_list-->expr arg_list'
arg_list'-->, expr arg_list'|e
args-->arg_list|e
